<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<!-- Generated by Sphinx Dita Writer 0.16 -->
<topic xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="step-2-prepare-a-yocto-project-based-image" xml:lang="en-US" outputclass="no-rel-links" ditaarch:DITAArchVersion="1.2" class="- topic/topic ">
    <title class="- topic/title ">Step 2: Prepare a Yocto Project*-Based Image</title>
    <body>
        <div id="build-yocto-image-toolchain"/>
        <div id="step-2-prepare-a-yocto-project-based-image">
            <p>In this step, you will build a Yocto Project*-based image for the target system, and you will build the associated toolchain for the host system.</p>
            <ul>
                <li>
                    <p><b>Image:</b> You will start by building an image using the platform board support package (BSP) and integrate the Intel® Time Coordinated Computing Tools (Intel® TCC Tools) layer into it. The custom image provides full support for Intel® TCC Tools, making it the recommended approach to start with. In addition, you can choose to add the Intel® VTune™ Profiler layer to your image to experience the full capabilities of Intel® VTune™ Profiler when profiling applications on your target system.</p>
                    <p><i>Alternative to this image:</i> An alternative to building this image for the target is to install all dependencies on the default BSP image for Yocto Project and then deploying Intel® TCC Tools there. The <xref scope="external" format="https" href="https://software.intel.com/content/www/us/en/secure/develop/documentation/intel-time-coordinated-computing-tools-developer-guide-0-11/top/prerequisites-and-installation.html" class="- topic/xref ">Developer Guide</xref> offers a list of dependencies to resolve and steps for deploying Intel® TCC Tools on an already prepared OS.</p>
                </li>
                <li>
                    <p><b>Toolchain:</b> This step also shows how to build the recommended toolchain for development. The toolchain enables you to cross-compile for the target Yocto Project-based OS and resolves all build time dependencies.</p>
                    <p><i>Alternative to this toolchain:</i> An alternative to using the toolchain is to set up your host environment manually, by installing build dependencies. For instructions, see <xref scope="external" format="https" href="https://software.intel.com/content/www/us/en/secure/develop/documentation/intel-time-coordinated-computing-tools-developer-guide-0-11/top/prerequisites-and-installation.html" class="- topic/xref ">Developer Guide</xref>.</p>
                </li>
            </ul>
            <note>
                <p>Your system will take anywhere from one half-hour (assuming your system is a large server) to several hours (assuming your system is a typical laptop).</p>
            </note>
            <p>To build a Yocto Project*-based image and toolchain:</p>
            <ol>
                <li>
                    <p>Install the build host packages on your host system.
                    This is a one-time step.</p>
                    <p>The following command is for Ubuntu* 20.04 LTS. For updates
                    and other supported Linux* distributions, see <xref scope="external" format="https" href="https://www.yoctoproject.org/docs/current/ref-manual/ref-manual.html#required-packages-for-the-build-host" class="- topic/xref ">Yocto Project Reference
                    Manual</xref>.</p>
                    <codeblock>
$ sudo apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib \
                        build-essential chrpath socat cpio python3 python3-pip python3-pexpect \
                        xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev \
                        pylint3 xterm python curl git-lfs                    </codeblock>
                </li>
                <li>
                    <p>Download the BSP image sources for the
                    target platform and finish the setup steps in the release notes (all steps before calling the “bitbake” command in the “Build the Yocto Project*-based Image” section).</p>
                    <note>
                        <p>The optional step for bmaptool integration is required if you are going to boot the image from the internal local drive on the target system.</p>
                    </note>
                    <p>See the appropriate release notes:</p>
                    <ul>
                        <li>
                            <p><xref scope="external" format="https" href="https://cdrdv2.intel.com/v1/dl/getContent/615079" class="- topic/xref ">Tiger Lake UP3 BSP release
                            notes</xref></p>
                            <note>
                                <p>The steps for including proprietary package RTCM are necessary.</p>
                            </note>
                        </li>
                        <li>
                            <p><xref scope="external" format="https" href="https://cdrdv2.intel.com/v1/dl/getContent/616424" class="- topic/xref ">Elkhart Lake BSP release
                            notes</xref></p>
                        </li>
                    </ul>
                </li>
                <li>
                    <p><b>For Tiger Lake Beta 2 BSP only:</b></p>
                    <ol>
                        <li>
                            <p>Patch the tcc_buffer driver:</p>
                            <ol>
                                <li>
                                    <p>Go to the kernel folder:</p>
                                    <codeblock>
cd /&lt;BSP_directory&gt;/managed/linux-intel-ese-lts-5.4                                    </codeblock>
                                </li>
                                <li>
                                    <p>Create a branch:</p>
                                    <codeblock>
git checkout -b DRIVER_PATCH                                    </codeblock>
                                </li>
                                <li>
                                    <p>Apply the patch from the install directory
                                    in <xref scope="local" format="dita" href="tcc_gsg_download.xml#download-tcc-tools" class="- topic/xref ">Step 1: Download and Install the Package</xref>:</p>
                                    <codeblock>
git am &lt;install_directory&gt;/target/meta-intel-tcc/recipes-kernel/linux/0001-tcc-tcc-driver-should-not-exit-even-if-no-psram-entry.patch                                    </codeblock>
                                </li>
                            </ol>
                        </li>
                        <li>
                            <p>Disable <codeph>resctrl</codeph>:</p>
                            <p>Linux kernel Resource Control (<codeph>resctrl</codeph>) controls <xref scope="external" format="https" href="https://www.kernel.org/doc/Documentation/x86/intel_rdt_ui.txt" class="- topic/xref ">Intel® Resource Director Technology and Cache Allocation Technology</xref>.</p>
                            <p>However, <codeph>resctrl</codeph> overrides configurations done by the cache configurator. Intel recommends disabling <codeph>resctrl</codeph> for Tiger Lake UP3.</p>
                            <ol>
                                <li>
                                    <p>Open <codeph>local.conf</codeph>. The following command uses vi as an example.
                                    Feel free to use any method.</p>
                                    <codeblock>
vi /&lt;BSP_directory&gt;/build/conf/local.conf                                    </codeblock>
                                </li>
                                <li>
                                    <p>Add the following text at the end of the file:</p>
                                    <codeblock>
APPEND += " rdt=!l3cat,!l2cat"                                    </codeblock>
                                </li>
                                <li>
                                    <p>Save your changes and exit the file.</p>
                                </li>
                            </ol>
                        </li>
                    </ol>
                </li>
                <li>
                    <p>Go to the install directory in <xref scope="local" format="dita" href="tcc_gsg_download.xml#download-tcc-tools" class="- topic/xref ">Step 1: Download and Install the Package</xref>:</p>
                    <codeblock>
cd &lt;install_directory&gt;                    </codeblock>
                    <note>
                        <p>You may integrate Intel® VTune™ Profiler at this step to avoid rebuilding the image. See <xref scope="external" format="https" href="https://software.intel.com/content/www/us/en/secure/develop/documentation/intel-time-coordinated-computing-tools-vtune-0-11/top.html" class="- topic/xref ">Profiling Real-Time Applications with Intel® VTune™ Profiler</xref>.</p>
                    </note>
                </li>
                <li>
                    <p>Set the BSP_YOCTO_FOLDER variable. For BSP directory, provide the
                    full path of the BSP working directory.</p>
                    <codeblock>
export BSP_YOCTO_FOLDER=/&lt;BSP_directory&gt;/intel-embedded-system-enabling                    </codeblock>
                </li>
                <li>
                    <p>Remove non-compatible version of open62541 recipes from the BSP:</p>
                    <codeblock>
rm -rf ${BSP_YOCTO_FOLDER}/meta-intel-embedded-system-enabling/meta-intel-ese-main/recipes-connectivity/open62541                    </codeblock>
                </li>
                <li>
                    <p>Make the integration shell script executable:</p>
                    <codeblock>
chmod +x ./target/tcc_integrate_bsp.sh                    </codeblock>
                </li>
                <li>
                    <p>Run the following command to integrate Intel® TCC Tools into the BSP:</p>
                    <codeblock>
./target/tcc_integrate_bsp.sh                    </codeblock>
                </li>
                <li>
                    <p>Go to the BSP directory:</p>
                    <codeblock>
cd /&lt;BSP_directory&gt;/build                    </codeblock>
                </li>
                <li>
                    <p>Source the build environment. (Note: “.” is the current directory.)</p>
                    <codeblock>
source ${BSP_YOCTO_FOLDER}/oe-init-build-env .                    </codeblock>
                </li>
                <li>
                    <p>Build the image.</p>
                    <codeblock>
bitbake multiconfig:x86:core-image-sato-sdk                    </codeblock>
                </li>
                <li>
                    <p>Build the toolchain.</p>
                    <ol>
                        <li>
                            <p>Execute the following command to set the number of maximum open
                            file descriptors per user to 10240.</p>
                            <codeblock>
ulimit -n 10240                            </codeblock>
                        </li>
                        <li>
                            <p>Build the toolchain:</p>
                            <codeblock>
bitbake multiconfig:x86:core-image-sato-sdk -c populate_sdk                            </codeblock>
                        </li>
                    </ol>
                </li>
                <li>
                    <p>After the build is finished, confirm that you have the following items:</p>
                    <ul>
                        <li>
                            <p>Image:
                            <codeph>&lt;BSP_directory&gt;/build/tmp-x86-glibc/deploy/images/intel-corei7-64/core-image-sato-sdk-intel-corei7-64-&lt;datetime&gt;.wic</codeph>.</p>
                        </li>
                        <li>
                            <p>Bmap file:
                            <codeph>&lt;BSP_directory&gt;/build/tmp-x86-glibc/deploy/images/intel-corei7-64/core-image-sato-sdk-intel-corei7-64-&lt;datetime&gt;.wic.bmap</codeph>.</p>
                        </li>
                        <li>
                            <p>Toolchain installation script:
                            <codeph>&lt;BSP_directory&gt;/build/tmp-x86-glibc/deploy/sdk/oecore-x86_64-corei7-64-toolchain-&lt;version&gt;.sh</codeph>.</p>
                        </li>
                    </ul>
                </li>
            </ol>
        </div>
    </body>
</topic>
