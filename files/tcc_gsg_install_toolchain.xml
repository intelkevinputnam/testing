<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<!-- Generated by Sphinx Dita Writer 0.16 -->
<topic xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="step-3-prepare-host-machine-for-development" xml:lang="en-US" outputclass="no-rel-links" ditaarch:DITAArchVersion="1.2" class="- topic/topic ">
    <title class="- topic/title ">Step 3: Prepare Host Machine for Development</title>
    <body>
        <div id="install-toolchain"/>
        <div id="step-3-prepare-host-machine-for-development">
            <p>In this step, you will prepare your host system for development with Intel® Time Coordinated Computing Tools (Intel® TCC Tools). This involves installing the toolchain that you built in <xref scope="local" format="dita" href="tcc_gsg_build_yocto_image_toolchain.xml#build-yocto-image-toolchain" class="- topic/xref ">Step 2: Prepare a Yocto Project*-Based Image</xref>.</p>
            <p>An alternative to using the toolchain is to set up your host environment manually, by installing build dependencies. For instructions, see <xref scope="external" format="https" href="https://software.intel.com/content/www/us/en/secure/develop/documentation/intel-time-coordinated-computing-tools-developer-guide-0-11/top/prerequisites-and-installation.html" class="- topic/xref ">Developer Guide</xref>.</p>
            <div id="id1">
                <p><b>Install Toolchain</b></p>
                <ol>
                    <li>
                        <p>On the host system, go to the directory where the toolchain
                        installation script is located (see
                        <xref scope="local" format="dita" href="tcc_gsg_build_yocto_image_toolchain.xml#build-yocto-image-toolchain" class="- topic/xref ">Step 2: Prepare a Yocto Project*-Based Image</xref>).</p>
                    </li>
                    <li>
                        <p>Run the following command to install the toolchain. Replace
                        <codeph>&lt;version&gt;</codeph> with the version you are using. Replace
                        <codeph>&lt;toolchain_installation_directory&gt;</codeph> with the desired destination —
                        the script will create the directory if it doesn’t already exist.
                        Example: <codeph>/home/&lt;user&gt;/Desktop/tools/toolchain</codeph>.
                        <b>Don’t choose the ``tmp`` directory, as it will be emptied upon
                        reboot.</b></p>
                        <codeblock>
./oecore-x86_64-corei7-64-toolchain-&lt;version&gt;.sh -d &lt;toolchain_installation_directory&gt;                        </codeblock>
                    </li>
                    <li>
                        <p>To build an application, source the toolchain cross-compile
                        environment. Replace <codeph>&lt;toolchain_installation_directory&gt;</codeph> with the
                        directory from the previous step.</p>
                        <codeblock>
source &lt;toolchain_installation_directory&gt;/environment-setup-corei7-64-poky-linux                        </codeblock>
                        <p>After completing this step, the standard toolchain variables (for
                        example, CC, AR, and LD) now point to the toolchain.</p>
                    </li>
                    <li>
                        <p>As an example, build one of the provided sample applications,
                        <codeph>tcc_cache_allocation_sample</codeph>, as follows:</p>
                        <ol>
                            <li>
                                <p>Go to the following directory:</p>
                                <codeblock>
cd $SDKTARGETSYSROOT/usr/share/tcc_tools/samples/tcc_cache_allocation_sample                                </codeblock>
                            </li>
                            <li>
                                <p>Build the sample:</p>
                                <codeblock>
make                                </codeblock>
                            </li>
                            <li>
                                <p>Check that the sample was built without errors.</p>
                            </li>
                        </ol>
                    </li>
                    <li>
                        <p>Close the terminal window, because you need to perform the next steps
                        outside the cross-compile environment.</p>
                    </li>
                </ol>
            </div>
            <div id="install-additional-host-dependencies">
                <p><b>Install Additional Host Dependencies</b></p>
                <p>In this step, you will install dependencies for host-side tools. The dependencies
                are required for the data streams optimizer and cache allocation capabilities.</p>
                <note>
                    <p>Make sure that the correct Python installation is used to install modules and
                    run host-side tools. Do not source the cross-compile environment to work with host-side tools because it contains its own Python installation
                    and may cause conflicts with Python installed on the host system.</p>
                </note>
                <ol>
                    <li>
                        <p>Open a new terminal window on the host system.</p>
                    </li>
                    <li>
                        <p>Install the pip tool for Python 3:</p>
                        <codeblock>
sudo apt-get install python3-pip                        </codeblock>
                        <p>Skip this step if you have already installed pip for Python 3.</p>
                    </li>
                    <li>
                        <p>Go to the following directory:</p>
                        <codeblock>
cd &lt;installation_directory&gt;/tools                        </codeblock>
                    </li>
                    <li>
                        <p>Install the required Python modules:</p>
                        <codeblock>
pip3 install -r prerequisites.txt --user                        </codeblock>
                    </li>
                    <li>
                        <p>Go to <xref scope="external" format="https" href="https://github.com/intel/iotg-fbu/tree/v0.7.6" class="- topic/xref ">Firmware and BIOS Utilities v0.7.6</xref> and install the <codeph>siiptool</codeph> directory
                        to the <codeph>tools/capsule</codeph> directory on your host system. See <codeph>tools/capsule/README.md</codeph> for more details.</p>
                    </li>
                    <li>
                        <p>Install certificates:</p>
                        <p>Certificates are required by the Firmware and BIOS Utilities software during
                        capsule file generation. You can download testing certificates, for example,
                        certificates from the
                        <xref scope="external" format="https" href="https://github.com/tianocore/edk2/tree/master/BaseTools/Source/Python/Pkcs7Sign" class="- topic/xref ">EDK2 repository</xref>
                        to the <codeph>tools/cert</codeph> directory. The following certificates are needed:
                        <codeph>TestCert.pem</codeph>, <codeph>TestRoot.pub.pem</codeph>, <codeph>TestSub.pub.pem</codeph>. See <codeph>tools/cert/README.md</codeph>
                        for more details.</p>
                    </li>
                </ol>
            </div>
        </div>
    </body>
</topic>
