<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<!-- Generated by Sphinx Dita Writer 0.16 -->
<topic xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="step-2-prepare-a-yocto-project-based-image-intel-vtune-profiler" xml:lang="en-US" outputclass="no-rel-links" ditaarch:DITAArchVersion="1.2" class="- topic/topic ">
    <title class="- topic/title ">Step 2: Prepare a Yocto Project*-Based Image (Intel® VTune™ Profiler)</title>
    <body>
        <div id="tcc-vtune-build-image-and-toolchain"/>
        <div id="step-2-prepare-a-yocto-project-based-image-intel-vtune-profiler">
            <p>In this step, you will build the Yocto Project*-based image required for
            this tutorial. The image contains Intel® VTune™ Profiler drivers in
            addition to the contents of the standard Intel® Time Coordinated
            Computing Tools (Intel® TCC Tools) image. (For a description of the standard
            image, see the <xref scope="external" format="https" href="https://software.intel.com/content/www/us/en/secure/develop/documentation/get-started-with-intel-time-coordinated-computing-tools-0-11/top.html" class="- topic/xref ">Get Started
            Guide</xref>.)
            Later in this tutorial, you will install the image on the target as an
            operating system.</p>
            <note>
                <p>To build this image, your system will take anywhere from one half-hour (assuming your system is a large server) to several hours (assuming your system is a typical laptop).</p>
            </note>
            <ol>
                <li>
                    <p>Create the BSP_FOLDER by completing the following steps from the release
                    notes:</p>
                    <ol>
                        <li>
                            <p>See the appropriate release notes:</p>
                            <ul>
                                <li>
                                    <p><xref scope="external" format="https" href="https://cdrdv2.intel.com/v1/dl/getContent/616424" class="- topic/xref ">Elkhart Lake BSP release
                                    notes</xref></p>
                                </li>
                                <li>
                                    <p><xref scope="external" format="https" href="https://cdrdv2.intel.com/v1/dl/getContent/615079" class="- topic/xref ">Tiger Lake UP3 BSP release notes</xref></p>
                                </li>
                            </ul>
                        </li>
                        <li>
                            <p>Complete Section 5.0 Prepare and Set Up the Host System.</p>
                        </li>
                        <li>
                            <p>Complete Section 6.1 Obtain Repository Sources.</p>
                        </li>
                        <li>
                            <p>Complete Section 6.2 Build the Yocto Project-based Image,
                            <b>steps 1–4 only</b>.</p>
                        </li>
                    </ol>
                </li>
                <li>
                    <p>If you haven’t already downloaded the package, go to the <xref scope="external" format="https" href="https://software.intel.com/content/www/us/en/secure/develop/time-coordinated-computing-tools/download.html" class="- topic/xref ">Download
                    page</xref>.
                    Click <b>Free Download for Linux*</b>.</p>
                </li>
                <li>
                    <p>Copy tcc_tools_<i>&lt;version&gt;</i>.tar.gz to the directory created
                    in the previous step.</p>
                </li>
                <li>
                    <p>Extract the package. Replace <codeph>&lt;version&gt;</codeph> as appropriate.</p>
                    <codeblock>tar -xvf tcc_tools_&lt;version&gt;.tar.gz</codeblock>
                </li>
                <li>
                    <p>Go to the directory containing the extracted files:</p>
                    <codeblock>cd tcc_tools_&lt;version&gt;</codeblock>
                </li>
                <li>
                    <p>Make the shell script executable:</p>
                    <codeblock>chmod +x ./tcc_tools_install_&lt;version&gt;.sh</codeblock>
                </li>
                <li>
                    <p>Run the following command to extract the components. For the
                    <codeph>target</codeph> argument, specify the desired installation directory —
                    the script will create the directory if it doesn’t already exist.
                    Example: <codeph>/home/&lt;user&gt;/Desktop/tools</codeph>.</p>
                    <codeblock>./tcc_tools_install_&lt;version&gt;.sh --noexec --target &lt;installation_directory&gt;</codeblock>
                </li>
                <li>
                    <p>Go to the installation directory from the previous step:</p>
                    <codeblock>cd &lt;installation_directory&gt;</codeblock>
                </li>
                <li>
                    <p>Set the BSP_FOLDER, BSP_YOCTO_FOLDER, and VTUNE_PROFILER_2020_DIR
                    variables. For BSP directory, provide the full path of the BSP
                    working directory.</p>
                    <codeblock>export BSP_FOLDER=&lt;BSP_directory&gt;
                        export BSP_YOCTO_FOLDER=${BSP_FOLDER}/intel-embedded-system-enabling
                        export VTUNE_PROFILER_2020_DIR=/opt/intel/vtune_profiler</codeblock>
                </li>
                <li>
                    <p>Run the following command to integrate Intel® Time Coordinated
                    Computing Tools (Intel® TCC Tools) into the BSP.</p>
                    <codeblock>./tcc_integrate_bsp.sh</codeblock>
                </li>
                <li>
                    <p>Open <codeph>bblayers.conf</codeph>. The following command uses vi as an example.
                    Feel free to use any method.</p>
                    <codeblock>cd ${BSP_FOLDER}/build
                        vi conf/bblayers.conf</codeblock>
                </li>
                <li>
                    <p>Add the following text to the BBLAYERS variable:</p>
                    <codeblock>/opt/intel/vtune_profiler/sepdk/vtune-layer \</codeblock>
                    <p>Your file should look like the following:</p>
                    <codeblock>BBLAYERS ?= " \
                          ${TOPDIR}/../${METALAYER_PREFIX}meta \
                          ${TOPDIR}/../${METALAYER_PREFIX}meta-security \
                        ...
                          ${TOPDIR}/../${METALAYER_PREFIX}meta-${METALAYER_PREFIX}meta-intel-ese-main \
                          ${BSP_FOLDER}/intel-embedded-system-enabling/meta-intel-tcc \
                          ${BSP_FOLDER}/intel-embedded-system-enabling/meta-dpdk \
                          /opt/intel/vtune_profiler/sepdk/vtune-layer \
                        "
                        include internal/layers.conf</codeblock>
                </li>
                <li>
                    <p>Save your changes and exit the file.</p>
                </li>
                <li>
                    <p>Open <codeph>local.conf</codeph>. The following command uses vi as an example.
                    Feel free to use any method.</p>
                    <codeblock>vi conf/local.conf</codeblock>
                </li>
                <li>
                    <p>Add the following text at the end of the file, to specify the
                    Intel® VTune™ Profiler recipe:</p>
                    <codeblock>IMAGE_INSTALL_append = " intel-vtune-sep-driver"</codeblock>
                </li>
                <li>
                    <p>Save your changes and exit the file.</p>
                </li>
                <li>
                    <p>Source the build environment. (Note: “.” is the current directory.)</p>
                    <codeblock>source ${BSP_YOCTO_FOLDER}/oe-init-build-env .</codeblock>
                </li>
                <li>
                    <p>Build the image:</p>
                    <codeblock>bitbake multiconfig:x86:core-image-sato-sdk</codeblock>
                </li>
                <li>
                    <p>Build the toolchain.</p>
                    <codeblock>bitbake multiconfig:x86:core-image-sato-sdk -c populate_sdk</codeblock>
                </li>
                <li>
                    <p>After the build is finished, which may take a few hours depending
                    on system resources, confirm that you have the following items:</p>
                    <ul>
                        <li>
                            <p>Image:
                            <codeph>${BSP_YOCTO_FOLDER}/build/tmp-x86-glibc/deploy/images/intel-corei7-64/core-image-sato-sdk-intel-corei7-64-&lt;datetime&gt;.wic</codeph>.</p>
                        </li>
                        <li>
                            <p>Bmap file:
                            <codeph>${BSP_YOCTO_FOLDER}/build/tmp-x86-glibc/deploy/images/intel-corei7-64/core-image-sato-sdk-intel-corei7-64-&lt;datetime&gt;.wic.bmap</codeph>.</p>
                        </li>
                        <li>
                            <p>Toolchain installation script:
                            <codeph>${BSP_YOCTO_FOLDER}/build/tmp-x86-glibc/deploy/sdk/oecore-x86_64-corei7-64-toolchain-&lt;version&gt;.sh</codeph>.</p>
                        </li>
                    </ul>
                </li>
            </ol>
            <p><b>Troubleshooting</b></p>
            <p>If the following error occurred while building the image:</p>
            <codeblock>| + echo ERROR: Linux kernels prior to 2.6.x are unsupported ... exiting.
                | ERROR: Linux kernels prior to 2.6.x are unsupported ... exiting.
                | + echo
                |
                | + exit 254
                | WARNING: exit code 254 from a shell command.</codeblock>
            <p>To fix this error:</p>
            <ol>
                <li>
                    <p>Go to the following file:</p>
                    <codeblock>vi /opt/intel/vtune_profiler/sepdk/src/build-driver</codeblock>
                </li>
                <li>
                    <p>Change assigning of the variable KS_MAKEFILE:</p>
                    <codeblock>KS_MAKEFILE=${BSP_PATH}/build/tmp-glibc/work-shared/intel-corei7-64/kernel-source/Makefile</codeblock>
                    <p>Your file should look like the following:</p>
                    <codeblock># determine if using kernel 2.6 sources or later
                        
                        KS_MAKEFILE=${BSP_PATH}/build/tmp-glibc/work-shared/intel-corei7-64/kernel-source/Makefile
                        if [ -r ${KS_MAKEFILE} ] ; then
                          KS_VERSION=`${GREP} "^VERSION" ${KS_MAKEFILE} | ${HEAD} -1 | ${SED} -e 's/ //g' | ${CUT} -d '=' -f 2`
                          KS_PATCHLEVEL=`${GREP} "^PATCHLEVEL" ${KS_MAKEFILE} | ${HEAD} -1 | ${SED} -e 's/ //g' | ${CUT} -d '=' -f 2`
                        ...</codeblock>
                </li>
                <li>
                    <p>Exit the file.</p>
                </li>
                <li>
                    <p>Continue the build:</p>
                    <codeblock>bitbake multiconfig:x86:core-image-sato-sdk</codeblock>
                </li>
            </ol>
        </div>
    </body>
</topic>
