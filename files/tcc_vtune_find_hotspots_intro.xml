<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<!-- Generated by Sphinx Dita Writer 0.16 -->
<topic xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="find-hotspots" xml:lang="en-US" outputclass="no-rel-links" ditaarch:DITAArchVersion="1.2" class="- topic/topic ">
    <title class="- topic/title ">Find Hotspots</title>
    <body>
        <div id="tcc-vtune-find-hotspots-intro"/>
        <div id="find-hotspots">
            <p>This tutorial focuses on hotspots related to memory access. In this
            context, hotspots are memory objects (such as arrays) in your real-time
            application that have a high number of Level 2 (L2) or Level 3 (L3)
            cache misses.</p>
            <p>Intel® Time Coordinated Computing Tools (Intel® TCC Tools) offers the <i>cache allocation library</i>, a set of C APIs that can decrease the number of misses by allocating buffers in L2 and L3 cache. Since cache is smaller than DRAM, it is important to choose carefully which memory objects to target so as not to overuse the cache. Hotspots are the prime candidates. The first step to using the cache allocation library is to find the hotspots in your application.</p>
            <p>This tutorial shows how to find hotspots at the L2 and L3 cache levels
            with Intel® VTune™ Profiler. In general, consider the size and time
            sensitivity of the data to decide which cache level to analyze. If the
            data size is small and access is highly time critical, it’s more
            relevant to check L2 misses. In other cases, check L3 misses.</p>
            <p>This tutorial uses a provided sample application as an example.</p>
        </div>
    </body>
</topic>
